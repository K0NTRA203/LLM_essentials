"""
import './App.css';

import { useRef, useState } from 'react';
import { useHandleConversationNameChange } from './handleConversationNameChange';

const App = () => {
  // Create refs for the input elements
  const conversationIdRef = useRef(null);
  const parentMessageIdRef = useRef(null);
  const userPromptRef = useRef(null);
  const convNameRef = useRef(null)
  const {conversationName, handleConversationNameChange} = useHandleConversationNameChange(conversationIdRef, parentMessageIdRef);

  const handleFormSubmit = (event) => {
    event.preventDefault();

    // Get the values of the input elements
    const conversationId = conversationIdRef.current.value;
    const parentMessageId = parentMessageIdRef.current.value;
    const userPrompt = userPromptRef.current.value;
    const convName = convNameRef.current.value;

    // Send a POST request to the server with the input values as the request body
    fetch('http://localhost:3002/chat', {
      method: 'POST',
      body: JSON.stringify({ conversation_id: conversationId, parent_message_id: parentMessageId, user_prompt: userPrompt,conversation_name:convName }),
      headers: { 'Content-Type': 'application/json' },
    })
      .then((response) => response.json())
      .then((data) => {
        // Update the parentMessageId field and the serverResponse element with the response from the server
        parentMessageIdRef.current.value = data.parent_message_id;
        conversationIdRef.current.value = data.conversation_id;
        document.getElementById('serverResponse').innerHTML = data.response;
      });
  };

  const Form = () => (
    <div>
      <form onSubmit={handleFormSubmit}>
        <label htmlFor="conversationId">Conversation ID:</label>
        <br />
        <input type="text" id="conversationId" ref={conversationIdRef} disabled/>
        <br />
        <label htmlFor="parentMessageId">Parent Message ID:</label>
        <br />
        <input type="text" id="parentMessageId" ref={parentMessageIdRef} disabled/>
        <br />
        <label htmlFor="convName">Conversation Name:</label>
        <br />
        <input type="text" id="convName" ref={convNameRef} value={conversationName} onChange={handleConversationNameChange} />
        <br />
        <label htmlFor="userPrompt">User Prompt:</label>
        <br />
        <textarea id="userPrompt" style={{ width: '80%', height: '200px' ,left: '50%'}} ref={userPromptRef} />
        <br />
        <button type="submit">Send</button>
      </form>
    </div>
  );

  const ServerResponse = () => (
    <div style={{ width: '60%', borderLeft: '1px solid black' }}>
      <p>Server Response:</p>
      <div id="serverResponse" style={{ width: '100%', height: '200px', border: '1px solid black', overflow: 'auto' }}></div>
    </div>
  );

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        <Form />
        <ServerResponse />
      </div>
    </div>
  );
};

export default App;"""
""" i want handleFormSubmit  and Form and ServerResponse to be in different files. how do i sync variable values and connect this components together?"""

import React from 'react';
import handleFormSubmit from './handleFormSubmit';
import Form from './Form';
import ServerResponse from './ServerResponse';

const App = () => {
  // Create refs for the input elements
  const conversationIdRef = useRef(null);
  const parentMessageIdRef = useRef(null);
  const userPromptRef = useRef(null);
  const convNameRef = useRef(null)
  const {conversationName, handleConversationNameChange} = useHandleConversationNameChange(conversationIdRef, parentMessageIdRef);

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between' }}>
        <Form conversationIdRef={conversationIdRef} parentMessageIdRef={parentMessageIdRef} userPromptRef={userPromptRef} convNameRef={convNameRef} handleConversationNameChange={handleConversationNameChange} conversationName={conversationName}/>
        <ServerResponse />
      </div>
    </div>
  );
};

export default App;
""" this is my form.js:"""
import React, {useRef} from 'react';

const Form = (props) => {
  const {conversationIdRef, parentMessageIdRef, userPromptRef, convNameRef, handleConversationNameChange, conversationName} = props;

  const handleFormSubmit = (event) => {
    event.preventDefault();

    // Get the values of the input elements
    const conversationId = conversationIdRef.current.value;
    const parentMessageId = parentMessageIdRef.current.value;
    const userPrompt = userPromptRef.current.value;
    const convName = convNameRef.current.value;

    // Send a POST request to the server with the input values as the request body
    fetch('http://localhost:3002/chat', {
      method: 'POST',
      body: JSON.stringify({ conversation_id: conversationId, parent_message_id: parentMessageId, user_prompt: userPrompt,conversation_name:convName }),
      headers: { 'Content-Type': 'application/json' },
    })
      .then((response) => response.json())
      .then((data) => {
        // Update the parentMessageId field and the serverResponse element with the response from the server
        parentMessageIdRef.current.value = data.parent_message_id;
        conversationIdRef.current.value = data.conversation_id;
        document.getElementById('serverResponse').innerHTML = data.response;
      });
  };

  return (
    <div>
      <form onSubmit={handleFormSubmit}>
        <label htmlFor="conversationId">Conversation ID:</label>
        <br />
        <input type="text" id="conversationId" ref={conversationIdRef} disabled/>
        <br />
        <label htmlFor="parentMessageId">Parent Message ID:</label>
        <br />
        <input type="text" id="parentMessageId" ref={parentMessageIdRef} disabled/>
        <br />
        <label htmlFor="convName">Conversation Name:</label>
        <br />
        <input type="text" id="convName" ref={convNameRef} value={conversationName} onChange={handleConversationNameChange} />
        <br />
        <label htmlFor="userPrompt">User Prompt:</label>
        <br />
        <textarea id="userPrompt" style={{ width: '80%', height: '200px' ,left: '50%'}} ref={userPromptRef} />
        <br />
        <button type="submit">Send</button>
      </form>
    </div>
  );
};

export default Form;""" edit form.js to have a list instead of conversationName getting list of names from /names endpoint and also user can write new one

import React, {useRef, useState, useEffect} from 'react';

const Form = (props) => {
  const {conversationIdRef, parentMessageIdRef, userPromptRef, convNameRef, handleConversationNameChange, conversationName} = props;
  const [conversationNames, setConversationNames] = useState([]);

  useEffect(() => {
    fetch('http://localhost:3002/names')
      .then(response => response.json())
      .then(data => {
        setConversationNames(data.conversation_names);
      });
  }, []);

  const handleFormSubmit = (event) => {
    event.preventDefault();

    // Get the values of the input elements
    const conversationId = conversationIdRef.current.value;
    const parentMessageId = parentMessageIdRef.current.value;
    const userPrompt = userPromptRef.current.value;
    const convName = convNameRef.current.value;

    // Send a POST request to the server with the input values as the request body
    fetch('http://localhost:3002/chat', {
      method: 'POST',
      body: JSON.stringify({ conversation_id: conversationId, parent_message_id: parentMessageId, user_prompt: userPrompt,conversation_name:convName }),
      headers: { 'Content-Type': 'application/json' },
    })
      .then((response) => response.json())
      .then((data) => {
        // Update the parentMessageId field and the serverResponse element with the response from the server
        parentMessageIdRef.current.value = data.parent_message_id;
        conversationIdRef.current.value = data.conversation_id;
        document.getElementById('serverResponse').innerHTML = data.response;
      });
  };

  return (
    <div>
      <form onSubmit={handleFormSubmit}>
        <label htmlFor="conversationId">Conversation ID:</label>
        <br />
        <input type="text" id="conversationId" ref={conversationIdRef} disabled/>
        <br />
        <label htmlFor="parentMessageId">Parent Message ID:</label>
        <br />
        <input type="text" id="parentMessageId" ref={parentMessageIdRef} disabled/>
        <br />
        <label htmlFor="convName">Conversation Name:</label>
        <br />
        <select id="convName" ref={convNameRef} value={conversationName} onChange={handleConversationNameChange}>
          {conversationNames.map(name => (
            <option>{name}</option>
          ))}
        </select>
        <input type="text" id="convName" ref={convNameRef} value={conversationName} onChange={handleConversationNameChange} />
        <br />
        <label htmlFor="userPrompt">User Prompt:</label>
        <br />
        <textarea id="userPrompt" style={{ width: '80%', height: '200px' ,left: '50%'}} ref={userPromptRef} />
        <br />
        <button type="submit">Send</button>
      </form>
    </div>
  );
};

export default Form;